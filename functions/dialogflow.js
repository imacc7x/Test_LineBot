'use strict';

const { WebhookClient } = require('dialogflow-fulfillment');
const { Card, Suggestion, Payload } = require('dialogflow-fulfillment');

process.env.DEBUG = 'dialogflow:debug'; // enables lib debugging statements

exports.handler = (request, response, db) => {
    const agent = new WebhookClient({ request, response });
    console.log('Dialogflow Request headers: ' + JSON.stringify(request.headers));
    console.log('Dialogflow Request body: ' + JSON.stringify(request.body));


    const userId = request.body.originalDetectIntentRequest.payload.data.source.userId;

    function welcome(agent) {
        agent.add(`Welcome to my agent!`);
    }

    function fallback(agent) {
        agent.add(`I didn't understand`);
        agent.add(`I'm sorry, can you try again?`);
    }

    function activatingConfirm(agent) {
        agent.add('‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡∏Å‡∏Ñ‡πà‡∏∞ ‡∏î‡∏¥‡∏â‡∏±‡∏ô‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡πÅ‡∏Å‡πà‡∏ó‡∏µ‡∏°‡∏ú‡∏π‡πâ‡∏™‡∏£‡∏±‡∏≤‡∏á‡∏î‡∏¥‡∏â‡∏±‡∏ô ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏ú‡∏π‡πâ‡∏î‡∏∑‡πà‡∏°‡πÄ‡∏´‡∏•‡πâ‡∏≤‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô‡∏Ñ‡πà‡∏∞');
        agent.add('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏¥‡∏â‡∏±‡∏ô‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏£‡∏≤‡∏ö ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà‡∏Ñ‡∏∞');
    }

    function setAge(agent) {
        console.log("This is setProfile function");
        console.log("userId: " + userId);
        agent.add("Your userID: " + userId);
        const age = agent.parameters.age;
        agent.add("Your age: " + age);
        db.collection("Users").doc(userId).update({
            age: age
        });

        agent.add(
            createQuickReply(
                "‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏´‡∏•‡∏±‡∏Å‡∏Ñ‡∏∞",
                [{ label: "‡∏ï‡∏≥‡∏£‡∏ß‡∏à", text: "police" }, { label: "‡∏ó‡∏´‡∏≤‡∏£", text: "soldier" }]
            )
        );
    }

    function setCareer(agent) {
        console.log("This is setCareer function");
        const career = agent.parameters.career;
        agent.add("Your career: " + career);
        db.collection("Users").doc(userId).update({
            career: career
        });

        agent.add(
            createQuickReply(
                "‡∏Ñ‡∏∏‡∏ì‡∏î‡∏∑‡πà‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°‡πÅ‡∏≠‡∏•‡∏Å‡∏≠‡∏Æ‡∏≠‡∏•‡πå‡∏ö‡πà‡∏≠‡∏¢‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞",
                [
                    { label: "‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢", text: "Never" },
                    { label: "‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏•‡∏∞‡∏Ñ‡∏£‡∏±‡πâ‡∏á", text: "Not more than once a month" },
                    { label: "‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏•‡∏∞ 2 - 4 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á", text: "2-4 times a month" },
                    { label: "‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏•‡∏∞ 2 - 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á", text: "2-3 times a week" },
                    { label: "‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå", text: "More than 3 times a week" }
                ]
            )
        );
    }

    function setAlcoholTime(agent) {
        console.log("This is setAlcoholTime function");
        const time = agent.parameters.alcohol_time;
        agent.add("Time: " + time);
        db.collection("Users").doc(userId).update({
            alcohol_time: time
        });

        agent.add(
            createQuickReply(
                "‡πÇ‡∏î‡∏¢‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏î‡∏∑‡πà‡∏° ‡∏Ñ‡∏∏‡∏ì‡∏î‡∏∑‡πà‡∏°‡∏≠‡∏∞‡πÑ‡∏£‡∏Ñ‡∏∞",
                [
                    { label: "‡πÄ‡∏ö‡∏µ‡∏¢‡∏£‡πå", text: "beer" },
                    { label: "‡πÑ‡∏ß‡∏ô‡πå", text: "wine" },
                    { label: "‡∏™‡∏∏‡∏£‡∏≤", text: "spirits" },
                    { label: "‡∏ß‡∏≠‡∏î‡∏Å‡πâ‡∏≤", text: "vodka" }
                ]
            )
        );
    }

    function setAlcoholType(agent) {
        console.log("This is setAlcoholTime function");
        const type = agent.parameters.alcohol_type;
        agent.add("Time: " + type);
        db.collection("Users").doc(userId).update({
            alcohol_type: type
        });
    }


    function test(agent) {
        agent.add('success');
        //agent.add(JSON.stringify(request.body.originalDetectIntentRequest.payload.data.source.userId));
        agent.add('userId ' + userId);
        console.log("console log ", userId);
        const users = db.collection("Users");

        return users.doc(userId).get()
            .then(doc => {
                // eslint-disable-next-line promise/always-return
                if (!doc.exists) {
                    agent.add("Not Found");
                } else {
                    agent.add("This is User ID: " + doc.data().name);
                }
            });
    }

    function createQuickReply(text, options) {
        if (options.length) {
            let items = options.map( (option) => ( { type: "action", action: { type: "message", ...option} } ) )
            return new Payload(
                `LINE`,
                {
                    type: "text",
                    text: text,
                    quickReply: {
                        items: [...items]
                    }
                },
                { sendAsMessage: true }
            );
        }
    }

   

    // const alocoholPackaging ={
    //     type: "template",
    //     altText: "Test image carousel",
    //     template: {
    //         type: "image_carousel",
    //         columns: [{
    //             imageUrl:"fgg",
    //             action: {
    //                 type: "message",
    //                 label: "‡∏Ç‡∏ß‡∏î",
    //                 text : "bottle"
    //             }
    //         }]

    //     }
    // }




    // // Uncomment and edit to make your own intent handler
    // // uncomment `intentMap.set('your intent name here', yourFunctionHandler);`
    // // below to get this function to be run when a Dialogflow intent is matched
    // function yourFunctionHandler(agent) {
    //   agent.add(`This message is from Dialogflow's Cloud Functions for Firebase editor!`);
    //   agent.add(new Card({
    //       title: `Title: this is a card title`,
    //       imageUrl: 'https://developers.google.com/actions/images/badges/XPM_BADGING_GoogleAssistant_VER.png',
    //       text: `This is the body text of a card.  You can even use line\n  breaks and emoji! üíÅ`,
    //       buttonText: 'This is a button',
    //       buttonUrl: 'https://assistant.google.com/'
    //     })
    //   );
    //   agent.add(new Suggestion(`Quick Reply`));
    //   agent.add(new Suggestion(`Suggestion`));
    //   agent.setContext({ name: 'weather', lifespan: 2, parameters: { city: 'Rome' }});
    // }

    // // Uncomment and edit to make your own Google Assistant intent handler
    // // uncomment `intentMap.set('your intent name here', googleAssistantHandler);`
    // // below to get this function to be run when a Dialogflow intent is matched
    // function googleAssistantHandler(agent) {
    //   let conv = agent.conv(); // Get Actions on Google library conv instance
    //   conv.ask('Hello from the Actions on Google client library!') // Use Actions on Google library
    //   agent.add(conv); // Add Actions on Google library responses to your agent's response
    // }
    // // See https://github.com/dialogflow/fulfillment-actions-library-nodejs
    // // for a complete Dialogflow fulfillment library Actions on Google client library v2 integration sample

    // Run the proper function handler based on the matched Dialogflow intent name
    let intentMap = new Map();
    intentMap.set('Default Welcome Intent', welcome);
    intentMap.set('Default Fallback Intent', fallback);
    intentMap.set('Activating-confirm', activatingConfirm);
    intentMap.set('Set Age', setAge);
    intentMap.set('Set Career', setCareer);
    intentMap.set('Set Alcohol Time', setAlcoholTime);
    intentMap.set('Set Alcohol Type', setAlcoholType);
    intentMap.set('test', test);
    // intentMap.set('your intent name here', yourFunctionHandler);
    // intentMap.set('your intent name here', googleAssistantHandler);
    agent.handleRequest(intentMap);
};


